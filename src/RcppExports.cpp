// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// PARAMETERS
NumericVector PARAMETERS(int n, int d, int iteration);
RcppExport SEXP _MCGK_PARAMETERS(SEXP nSEXP, SEXP dSEXP, SEXP iterationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type iteration(iterationSEXP);
    rcpp_result_gen = Rcpp::wrap(PARAMETERS(n, d, iteration));
    return rcpp_result_gen;
END_RCPP
}
// CGKPRESET
List CGKPRESET(int n, int d, NumericVector parameters);
RcppExport SEXP _MCGK_CGKPRESET(SEXP nSEXP, SEXP dSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(CGKPRESET(n, d, parameters));
    return rcpp_result_gen;
END_RCPP
}
// CGK
NumericVector CGK(NumericMatrix X, int n, int d, List preset);
RcppExport SEXP _MCGK_CGK(SEXP XSEXP, SEXP nSEXP, SEXP dSEXP, SEXP presetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type preset(presetSEXP);
    rcpp_result_gen = Rcpp::wrap(CGK(X, n, d, preset));
    return rcpp_result_gen;
END_RCPP
}
// MCGK
NumericVector MCGK(List D, int n, int d, List testpreset);
RcppExport SEXP _MCGK_MCGK(SEXP DSEXP, SEXP nSEXP, SEXP dSEXP, SEXP testpresetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type testpreset(testpresetSEXP);
    rcpp_result_gen = Rcpp::wrap(MCGK(D, n, d, testpreset));
    return rcpp_result_gen;
END_RCPP
}
// MCGKTEST
List MCGKTEST(List D, int n, int d, List testpreset, int iteration);
RcppExport SEXP _MCGK_MCGKTEST(SEXP DSEXP, SEXP nSEXP, SEXP dSEXP, SEXP testpresetSEXP, SEXP iterationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type testpreset(testpresetSEXP);
    Rcpp::traits::input_parameter< int >::type iteration(iterationSEXP);
    rcpp_result_gen = Rcpp::wrap(MCGKTEST(D, n, d, testpreset, iteration));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MCGK_PARAMETERS", (DL_FUNC) &_MCGK_PARAMETERS, 3},
    {"_MCGK_CGKPRESET", (DL_FUNC) &_MCGK_CGKPRESET, 3},
    {"_MCGK_CGK", (DL_FUNC) &_MCGK_CGK, 4},
    {"_MCGK_MCGK", (DL_FUNC) &_MCGK_MCGK, 4},
    {"_MCGK_MCGKTEST", (DL_FUNC) &_MCGK_MCGKTEST, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MCGK(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
